name: Cross-Compile and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  AWS_REGION : eu-west-2 #Change to reflect your Region
  TF_LOG: INFO
  AWS_SAM_LOCAL : true

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'

      - name: Run Go Tests
        run: go test -race -covermode=atomic -coverprofile=coverage.out

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Create Build Directory
        run: mkdir -p build

      - name: Cross-Compile for Windows, macOS, and Linux
        run: |
          env GOOS=windows GOARCH=amd64 go build -ldflags "-X 'main.Version=${{ github.ref_name }}'" -o ./build/techdetector-windows-amd64.exe
          env GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'main.Version=${{ github.ref_name }}'" -o ./build/techdetector-darwin-amd64
          env GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -a -ldflags '-linkmode external -extldflags "-static" -X "main.Version=${{ github.ref_name }}"' -o ./build/techdetector-linux-amd64

      - name: Tar build directory
        run: tar -czvf build.tar.gz -C build .

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: build.tar.gz

  update-latest-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Create build directory
        run: mkdir -p ./build

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build

      - name: Install GitHub CLI
        run: sudo apt install gh

      - name: Check if release exists
        id: check_release
        continue-on-error: true
        run: |
          RELEASE_URL=$(gh release view latest --json url -q '.url') || true
          if [[ -n "$RELEASE_URL" ]]; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
            echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Remove existing assets
        if: env.RELEASE_EXISTS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSET_IDS=$(gh api -X GET $RELEASE_URL/assets -q '.[].id' ||:)
          for id in $ASSET_IDS; do
            gh api -X DELETE /repos/:owner/:repo/releases/assets/$id
          done

      - name: Upload new assets to latest release
        if: env.RELEASE_EXISTS_FOR_UPLOAD == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload latest ./build/* --clobber





  update_dev_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Required for 'git describe' to work

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Create build directory
        run: mkdir -p ./build

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build


      - name: Get version from git describe
        id: git_describe
        run: echo "GIT_DESCRIBE_VERSION=$(git describe --tags)" >> $GITHUB_ENV

      - name: Delete existing 'development' release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Continue if this fails (i.e., the release doesn't exist)
        run: gh release delete development --yes

      - name: Create new 'development' release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create development ./build/* \
          --title "Development Release: ${{ env.GIT_DESCRIBE_VERSION }}" \
          --notes "Auto-generated development release"
  
  
  

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Create build directory
        run: mkdir -p ./build

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build

      - name: Install dh-make-golang
        run: |
          sudo apt-get update
          sudo apt-get install -y dh-make-golang

      - uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file

      - name: Create Debian Package
        run: |
          gem install fpm
          cp ./build/techdetector-linux-amd64 ./techdetector
          fpm -s dir \
              -t deb \
              -n techdetector \
              -p ./build/techdetector-amd64-${{  github.ref_name }}.deb \
              -v ${{  github.ref_name }} \
              --description "Tool to detect technologies in git repos" \
              --url "https://github.com/reaandrew/techdetector" \
              --maintainer "Andy Rea <email@andrewrea.co.uk>" \
              --prefix=/usr/local/bin \
              --deb-no-default-config-files \
              ./techdetector

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/techdetector-windows-amd64.exe
          asset_name: techdetector-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/techdetector-darwin-amd64
          asset_name: techdetector-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/techdetector-linux-amd64
          asset_name: techdetector-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Deb Package Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/techdetector-amd64-${{  github.ref_name }}.deb
          asset_name: techdetector-amd64-${{  github.ref_name }}.deb
          asset_content_type: application/octet-stream